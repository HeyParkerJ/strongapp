(ns strongapp.core
  (:require
   [clojure-csv.core :refer [parse-csv]]
   [strongapp.database :refer [get-test]]))

;; https://stackoverflow.com/a/13646484
(defn open-file
  "Attempts to open a file and complains if the file is not present."

  [file-name]
  (let [file-data (try
                    (slurp file-name)
                    (catch Exception e (println (.getMessage e))))]
    file-data))

(defn ret-csv-data
  "Returns a lazy sequence generated by parse-csv.
  Uses open-file which will return a nil, if
  there is an exception in opening fnam.

  parse-csv called on non-nil file, and that
  data is returned."

  [fnam]
  (let [csv-file (open-file fnam)
        inter-csv-data (if-not (nil? csv-file)
                         (parse-csv csv-file)
                         nil)

        csv-data 
        (vec (filter #(and pos? (count %) 
                           (not (nil? (rest %)))) inter-csv-data))]

    (if-not (empty? csv-data)
      (pop csv-data)
      nil)))

(defn fetch-csv-data
  "This function accepts a csv file name, and returns parsed csv data,
     or returns nil if file is not present."

  [csv-file]
  (let [csv-data (ret-csv-data csv-file)]
    csv-data))

(defn main
  [& args]
  (println "Opening file")
  (let [results (fetch-csv-data "resources/strong.csv")]
    (println (type results))))

(defn -main
  []
  (println (get-test)))
